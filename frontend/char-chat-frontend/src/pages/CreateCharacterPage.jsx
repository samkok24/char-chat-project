/**
 * CAVEDUCK Ïä§ÌÉÄÏùº Í≥†Í∏â Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ±/ÏàòÏ†ï ÌéòÏù¥ÏßÄ
 * 5Îã®Í≥Ñ ÌÉ≠ ÏãúÏä§ÌÖú: Í∏∞Î≥∏Ï†ïÎ≥¥ ‚Üí ÎØ∏ÎîîÏñ¥ ‚Üí ÏòàÏãúÎåÄÌôî ‚Üí Ìò∏Í∞êÎèÑ ‚Üí Í≥µÍ∞úÏÑ§Ï†ï
 */

import React, { useState, useEffect } from 'react';
import { useNavigate, Link, useParams } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { charactersAPI } from '../lib/api';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Textarea } from '../components/ui/textarea';
import { Switch } from '../components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Alert, AlertDescription } from '../components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { Badge } from '../components/ui/badge';
import { Separator } from '../components/ui/separator';
import { 
  ArrowLeft,
  Save,
  Loader2,
  MessageCircle,
  AlertCircle,
  Plus,
  Trash2,
  Upload,
  Image,
  Volume2,
  Heart,
  Settings,
  Globe,
  Lock,
  Sparkles,
  BookOpen,
  Mic,
  Palette
} from 'lucide-react';

const CreateCharacterPage = () => {
  const { characterId } = useParams();
  const isEditMode = !!characterId;

  // üî• CAVEDUCK Ïä§ÌÉÄÏùº 5Îã®Í≥Ñ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞
  const [activeTab, setActiveTab] = useState('basic');
  const [formData, setFormData] = useState({
    // 1Îã®Í≥Ñ: Í∏∞Î≥∏ Ï†ïÎ≥¥
    basic_info: {
      name: '',
      description: '',
      personality: '',
      speech_style: '',
      greeting: '',
      world_setting: '',
      user_display_description: '',
      use_custom_description: false,
      introduction_scenes: [
        { title: 'ÎèÑÏûÖÎ∂Ä 1', content: '', secret: '' }
      ],
      character_type: 'roleplay',
      base_language: 'ko'
    },
    // 2Îã®Í≥Ñ: ÎØ∏ÎîîÏñ¥ ÏÑ§Ï†ï
    media_settings: {
      avatar_url: '',
      image_descriptions: [],
      voice_settings: {
        voice_id: null,
        voice_style: null,
        enabled: false
      }
    },
    // 3Îã®Í≥Ñ: ÏòàÏãú ÎåÄÌôî
    example_dialogues: {
      dialogues: []
    },
    // 4Îã®Í≥Ñ: Ìò∏Í∞êÎèÑ ÏãúÏä§ÌÖú
    affinity_system: {
      has_affinity_system: false,
      affinity_rules: '',
      affinity_stages: [
        { min_value: 0, max_value: 100, description: 'Ï∞®Í∞ÄÏö¥ Î∞òÏùëÏùÑ Î≥¥ÏûÖÎãàÎã§.' },
        { min_value: 101, max_value: 200, description: 'ÏπúÍ∑ºÌïòÍ≤å ÎåÄÌôîÌï©ÎãàÎã§.' },
        { min_value: 201, max_value: null, description: 'Îß§Ïö∞ ÏπúÎ∞ÄÌïòÍ≤å ÎåÄÌôîÌï©ÎãàÎã§.' }
      ]
    },
    // 5Îã®Í≥Ñ: Í≥µÍ∞ú ÏÑ§Ï†ï
    publish_settings: {
      is_public: true,
      custom_module_id: null,
      use_translation: true
    }
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [pageTitle, setPageTitle] = useState('ÏÉà Ï∫êÎ¶≠ÌÑ∞ ÎßåÎì§Í∏∞');

  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();

  // ÌÉ≠ Ï†ïÎ≥¥ Ï†ïÏùò
  const tabs = [
    {
      id: 'basic',
      label: 'Í∏∞Î≥∏ Ï†ïÎ≥¥',
      icon: Sparkles,
      description: 'Ï∫êÎ¶≠ÌÑ∞Ïùò Í∏∞Î≥∏ ÏÑ§Ï†ï',
      emoji: 'üî•'
    },
    {
      id: 'media',
      label: 'ÎØ∏ÎîîÏñ¥',
      icon: Palette,
      description: 'Ïù¥ÎØ∏ÏßÄÏôÄ ÏùåÏÑ± ÏÑ§Ï†ï',
      emoji: 'üé®'
    },
    {
      id: 'dialogues',
      label: 'ÏòàÏãú ÎåÄÌôî',
      icon: MessageCircle,
      description: 'AI ÏùëÎãµ ÌíàÏßà Ìñ•ÏÉÅ',
      emoji: 'üí¨'
    },
    {
      id: 'affinity',
      label: 'Ìò∏Í∞êÎèÑ',
      icon: Heart,
      description: 'Í¥ÄÍ≥Ñ ÏãúÏä§ÌÖú ÏÑ§Ï†ï',
      emoji: '‚ù§Ô∏è'
    },
    {
      id: 'publish',
      label: 'Í≥µÍ∞ú ÏÑ§Ï†ï',
      icon: Globe,
      description: 'Í≥µÍ∞ú Î∞è Í≥†Í∏â ÏÑ§Ï†ï',
      emoji: 'üöÄ'
    }
  ];

  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
    }

    if (isEditMode) {
      loadCharacterData();
    }
  }, [isAuthenticated, navigate, isEditMode, characterId]);

  const loadCharacterData = async () => {
    setLoading(true);
    try {
      // üî• Í≥†Í∏â Ï∫êÎ¶≠ÌÑ∞ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ API Ìò∏Ï∂ú
      const response = await fetch(`/api/characters/advanced/${characterId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Ï∫êÎ¶≠ÌÑ∞ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
      
      const char = await response.json();
      
      // üî• Í≥†Í∏â Ï∫êÎ¶≠ÌÑ∞ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞Î°ú Îß§Ìïë
      setFormData(prev => ({
        basic_info: {
          name: char.name || '',
          description: char.description || '',
          personality: char.personality || '',
          speech_style: char.speech_style || '',
          greeting: char.greeting || '',
          world_setting: char.world_setting || '',
          user_display_description: char.user_display_description || '',
          use_custom_description: char.use_custom_description || false,
          introduction_scenes: char.introduction_scenes || [{ title: 'ÎèÑÏûÖÎ∂Ä 1', content: '', secret: '' }],
          character_type: char.character_type || 'roleplay',
          base_language: char.base_language || 'ko'
        },
        media_settings: {
          avatar_url: char.avatar_url || '',
          image_descriptions: char.image_descriptions || [],
          voice_settings: char.voice_settings || {
            voice_id: null,
            voice_style: null,
            enabled: false
          }
        },
        example_dialogues: {
          dialogues: char.example_dialogues || []
        },
        affinity_system: {
          has_affinity_system: char.has_affinity_system || false,
          affinity_rules: char.affinity_rules || '',
          affinity_stages: char.affinity_stages || [
            { min_value: 0, max_value: 100, description: 'Ï∞®Í∞ÄÏö¥ Î∞òÏùëÏùÑ Î≥¥ÏûÖÎãàÎã§.' },
            { min_value: 101, max_value: 200, description: 'ÏπúÍ∑ºÌïòÍ≤å ÎåÄÌôîÌï©ÎãàÎã§.' },
            { min_value: 201, max_value: null, description: 'Îß§Ïö∞ ÏπúÎ∞ÄÌïòÍ≤å ÎåÄÌôîÌï©ÎãàÎã§.' }
          ]
        },
        publish_settings: {
          is_public: char.is_public,
          custom_module_id: char.custom_module_id,
          use_translation: char.use_translation !== undefined ? char.use_translation : true
        }
      }));
      setPageTitle('Ï∫êÎ¶≠ÌÑ∞ ÏàòÏ†ï');
    } catch (err) {
      console.error('Ï∫êÎ¶≠ÌÑ∞ Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', err);
      setError(err.message || 'Ï∫êÎ¶≠ÌÑ∞ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const updateFormData = (section, field, value) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const addIntroductionScene = () => {
    const newScene = { title: `ÎèÑÏûÖÎ∂Ä ${formData.basic_info.introduction_scenes.length + 1}`, content: '', secret: '' };
    updateFormData('basic_info', 'introduction_scenes', [...formData.basic_info.introduction_scenes, newScene]);
  };

  const removeIntroductionScene = (index) => {
    const scenes = formData.basic_info.introduction_scenes.filter((_, i) => i !== index);
    updateFormData('basic_info', 'introduction_scenes', scenes);
  };

  const updateIntroductionScene = (index, field, value) => {
    const scenes = [...formData.basic_info.introduction_scenes];
    scenes[index] = { ...scenes[index], [field]: value };
    updateFormData('basic_info', 'introduction_scenes', scenes);
  };

  const addExampleDialogue = () => {
    const newDialogue = { user_message: '', character_response: '', order_index: formData.example_dialogues.dialogues.length };
    updateFormData('example_dialogues', 'dialogues', [...formData.example_dialogues.dialogues, newDialogue]);
  };

  const removeExampleDialogue = (index) => {
    const dialogues = formData.example_dialogues.dialogues.filter((_, i) => i !== index);
    updateFormData('example_dialogues', 'dialogues', dialogues);
  };

  const updateExampleDialogue = (index, field, value) => {
    const dialogues = [...formData.example_dialogues.dialogues];
    dialogues[index] = { ...dialogues[index], [field]: value };
    updateFormData('example_dialogues', 'dialogues', dialogues);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (isEditMode) {
        // üî• Í≥†Í∏â Ï∫êÎ¶≠ÌÑ∞ ÏàòÏ†ï API Ìò∏Ï∂ú
        const updateData = {
          basic_info: {
            name: formData.basic_info.name,
            description: formData.basic_info.description,
            personality: formData.basic_info.personality,
            speech_style: formData.basic_info.speech_style,
            greeting: formData.basic_info.greeting,
            world_setting: formData.basic_info.world_setting,
            user_display_description: formData.basic_info.user_display_description,
            use_custom_description: formData.basic_info.use_custom_description,
            introduction_scenes: formData.basic_info.introduction_scenes,
            character_type: formData.basic_info.character_type,
            base_language: formData.basic_info.base_language
          },
          media_settings: {
            avatar_url: formData.media_settings.avatar_url,
            image_descriptions: formData.media_settings.image_descriptions,
            voice_settings: formData.media_settings.voice_settings
          },
          example_dialogues: {
            dialogues: formData.example_dialogues.dialogues
          },
          affinity_system: {
            has_affinity_system: formData.affinity_system.has_affinity_system,
            affinity_rules: formData.affinity_system.affinity_rules,
            affinity_stages: formData.affinity_system.affinity_stages
          },
          publish_settings: {
            is_public: formData.publish_settings.is_public,
            custom_module_id: formData.publish_settings.custom_module_id,
            use_translation: formData.publish_settings.use_translation
          }
        };
        
        const response = await fetch(`/api/characters/advanced/${characterId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          },
          body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Ï∫êÎ¶≠ÌÑ∞ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
        
        navigate('/my-characters');
      } else {
        // üî• Í≥†Í∏â Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ± API Ìò∏Ï∂ú
        const createData = {
          basic_info: {
            name: formData.basic_info.name,
            description: formData.basic_info.description,
            personality: formData.basic_info.personality,
            speech_style: formData.basic_info.speech_style,
            greeting: formData.basic_info.greeting,
            world_setting: formData.basic_info.world_setting,
            user_display_description: formData.basic_info.user_display_description,
            use_custom_description: formData.basic_info.use_custom_description,
            introduction_scenes: formData.basic_info.introduction_scenes,
            character_type: formData.basic_info.character_type,
            base_language: formData.basic_info.base_language
          },
          media_settings: {
            avatar_url: formData.media_settings.avatar_url,
            image_descriptions: formData.media_settings.image_descriptions,
            voice_settings: formData.media_settings.voice_settings
          },
          example_dialogues: {
            dialogues: formData.example_dialogues.dialogues
          },
          affinity_system: {
            has_affinity_system: formData.affinity_system.has_affinity_system,
            affinity_rules: formData.affinity_system.affinity_rules,
            affinity_stages: formData.affinity_system.affinity_stages
          },
          publish_settings: {
            is_public: formData.publish_settings.is_public,
            custom_module_id: formData.publish_settings.custom_module_id,
            use_translation: formData.publish_settings.use_translation
          }
        };
        
        const response = await fetch('/api/characters/advanced', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          },
          body: JSON.stringify(createData)
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
        
        const result = await response.json();
        navigate(`/chat/${result.id}`);
      }
    } catch (err) {
      console.error(`Ï∫êÎ¶≠ÌÑ∞ ${isEditMode ? 'ÏàòÏ†ï' : 'ÏÉùÏÑ±'} Ïã§Ìå®:`, err);
      setError(err.message || `Ï∫êÎ¶≠ÌÑ∞ ${isEditMode ? 'ÏàòÏ†ï' : 'ÏÉùÏÑ±'}Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.`);
    } finally {
      setLoading(false);
    }
  };

  const renderBasicInfoTab = () => (
    <div className="space-y-6">
      <div className="space-y-4">
        <div>
          <Label htmlFor="name">Ï∫êÎ¶≠ÌÑ∞ Ïù¥Î¶Ñ *</Label>
          <Input
            id="name"
            value={formData.basic_info.name}
            onChange={(e) => updateFormData('basic_info', 'name', e.target.value)}
            placeholder="Ï∫êÎ¶≠ÌÑ∞ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            required
            maxLength={100}
          />
          <p className="text-sm text-gray-500 mt-1">
            Î™ÖÌôïÌïòÍ≥† Í∏∞ÏñµÌïòÍ∏∞ Ïâ¨Ïö¥ Ïù¥Î¶ÑÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.
          </p>
        </div>

        <div>
          <Label htmlFor="character_type">Ï†úÏûë Ïú†Ìòï</Label>
          <Select 
            value={formData.basic_info.character_type} 
            onValueChange={(value) => updateFormData('basic_info', 'character_type', value)}
          >
            <SelectTrigger>
              <SelectValue placeholder="Ï∫êÎ¶≠ÌÑ∞ Ïú†Ìòï ÏÑ†ÌÉù" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="roleplay">Î°§ÌîåÎ†àÏûâ</SelectItem>
              <SelectItem value="simulator">ÏãúÎÆ¨Î†àÏù¥ÌÑ∞</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div>
          <Label htmlFor="base_language">Í∏∞Ï§Ä Ïñ∏Ïñ¥</Label>
          <Select 
            value={formData.basic_info.base_language} 
            onValueChange={(value) => updateFormData('basic_info', 'base_language', value)}
          >
            <SelectTrigger>
              <SelectValue placeholder="Ïñ∏Ïñ¥ ÏÑ†ÌÉù" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="ko">ÌïúÍµ≠Ïñ¥</SelectItem>
              <SelectItem value="en">English</SelectItem>
              <SelectItem value="ja">Êó•Êú¨Ë™û</SelectItem>
              <SelectItem value="zh">‰∏≠Êñá</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div>
          <Label htmlFor="description">Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Î™Ö *</Label>
          <Textarea
            id="description"
            value={formData.basic_info.description}
            onChange={(e) => updateFormData('basic_info', 'description', e.target.value)}
            placeholder="Ï∫êÎ¶≠ÌÑ∞Ïóê ÎåÄÌïú ÏÑ§Î™ÖÏûÖÎãàÎã§ (Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Î™ÖÏùÄ Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎèÑ Í≥µÍ∞ú Îê©ÎãàÎã§)"
            rows={3}
            required
            maxLength={1000}
          />
        </div>

        <div>
          <Label htmlFor="personality">ÏÑ±Í≤© Î∞è ÌäπÏßï</Label>
          <Textarea
            id="personality"
            value={formData.basic_info.personality}
            onChange={(e) => updateFormData('basic_info', 'personality', e.target.value)}
            placeholder="Ï∫êÎ¶≠ÌÑ∞Ïùò ÏÑ±Í≤©Í≥º ÌäπÏßïÏùÑ ÏûêÏÑ∏Ìûà ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî"
            rows={4}
            maxLength={2000}
          />
        </div>

        <div>
          <Label htmlFor="speech_style">ÎßêÌà¨</Label>
          <Textarea
            id="speech_style"
            value={formData.basic_info.speech_style}
            onChange={(e) => updateFormData('basic_info', 'speech_style', e.target.value)}
            placeholder="Ï∫êÎ¶≠ÌÑ∞Ïùò ÎßêÌà¨Î•º Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî"
            rows={2}
            maxLength={1000}
          />
        </div>

        <div>
          <Label htmlFor="greeting">Ïù∏ÏÇ¨Îßê</Label>
          <Textarea
            id="greeting"
            value={formData.basic_info.greeting}
            onChange={(e) => updateFormData('basic_info', 'greeting', e.target.value)}
            placeholder="Ï±ÑÌåÖÏùÑ ÏãúÏûëÌï† Îïå Ï∫êÎ¶≠ÌÑ∞Í∞Ä Í±¥ÎÑ§Îäî Ï≤´ÎßàÎîî"
            rows={2}
            maxLength={500}
          />
        </div>
      </div>

      <Separator />

      <div className="space-y-4">
        <h3 className="text-lg font-semibold">ÏÑ∏Í≥ÑÍ¥Ä</h3>
        <div>
          <Label htmlFor="world_setting">ÏÑ∏Í≥ÑÍ¥Ä ÏÑ§Ï†ï</Label>
          <Textarea
            id="world_setting"
            value={formData.basic_info.world_setting}
            onChange={(e) => updateFormData('basic_info', 'world_setting', e.target.value)}
            placeholder="Ïù¥ÏïºÍ∏∞Ïùò Î∞∞Í≤ΩÏóê ÎåÄÌï¥ÏÑú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî"
            rows={4}
            maxLength={3000}
          />
        </div>

        <div className="flex items-center space-x-2">
          <Switch
            id="use_custom_description"
            checked={formData.basic_info.use_custom_description}
            onCheckedChange={(checked) => updateFormData('basic_info', 'use_custom_description', checked)}
          />
          <Label htmlFor="use_custom_description">ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥Ïó¨Ï§Ñ ÏÑ§Î™ÖÏùÑ Î≥ÑÎèÑÎ°ú ÏûëÏÑ±Ìï†Í≤åÏöî</Label>
        </div>

        {formData.basic_info.use_custom_description && (
          <div>
            <Label htmlFor="user_display_description">ÏÇ¨Ïö©ÏûêÏö© ÏÑ§Î™Ö</Label>
            <Textarea
              id="user_display_description"
              value={formData.basic_info.user_display_description}
              onChange={(e) => updateFormData('basic_info', 'user_display_description', e.target.value)}
              placeholder="ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥Ïó¨Ïßà Î≥ÑÎèÑÏùò ÏÑ§Î™ÖÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî"
              rows={3}
              maxLength={2000}
            />
          </div>
        )}
      </div>

      <Separator />

      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">ÎèÑÏûÖÎ∂Ä</h3>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={addIntroductionScene}
          >
            <Plus className="w-4 h-4 mr-2" />
            ÎèÑÏûÖÎ∂Ä Ï∂îÍ∞Ä
          </Button>
        </div>
        
        {formData.basic_info.introduction_scenes.map((scene, index) => (
          <Card key={index} className="p-4">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-medium">#{index + 1} {scene.title || 'ÎèÑÏûÖÎ∂Ä'}</h4>
              {formData.basic_info.introduction_scenes.length > 1 && (
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={() => removeIntroductionScene(index)}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              )}
            </div>
            
            <div className="space-y-3">
              <div>
                <Label>ÏãúÏûëÌïòÎäî ÏÉÅÌô©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</Label>
                <Textarea
                  value={scene.content}
                  onChange={(e) => updateIntroductionScene(index, 'content', e.target.value)}
                  placeholder="ÏãúÏûë Ìï† Îïå ÎÇòÏò§Îäî ÎåÄÏÇ¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
                  rows={3}
                  maxLength={2000}
                />
              </div>
              
              <div>
                <Label>ÎπÑÎ∞Ä Ï†ïÎ≥¥ (ÏÑ†ÌÉù)</Label>
                <Textarea
                  value={scene.secret}
                  onChange={(e) => updateIntroductionScene(index, 'secret', e.target.value)}
                  placeholder="ÎåÄÌôîÏ§ëÏù∏ Ïú†Ï†ÄÏóêÍ≤åÎäî ÎÖ∏Ï∂úÎêòÏßÄ ÏïäÎäî Ï†ïÎ≥¥Î°ú, ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±Í∏∞Ïóê Ï†ÑÎã¨ Îê©ÎãàÎã§."
                  rows={2}
                  maxLength={1000}
                />
                <p className="text-sm text-gray-500 mt-1">
                  ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥Ïó¨ÏßÄÏßÄ ÏïäÎäî ÎπÑÎ∞Ä Ï†ïÎ≥¥ÏûÖÎãàÎã§.
                </p>
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );

  const renderMediaTab = () => (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold flex items-center">
          <Image className="w-5 h-5 mr-2" />
          Ïù¥ÎØ∏ÏßÄ
        </h3>
        
        <div>
          <Label htmlFor="avatar_url">ÏïÑÎ∞îÌÉÄ Ïù¥ÎØ∏ÏßÄ URL</Label>
          <Input
            id="avatar_url"
            type="url"
            value={formData.media_settings.avatar_url}
            onChange={(e) => updateFormData('media_settings', 'avatar_url', e.target.value)}
            placeholder="https://example.com/avatar.jpg"
            maxLength={500}
          />
        </div>

        <div className="p-4 border-2 border-dashed border-gray-300 rounded-lg text-center">
          <Upload className="w-8 h-8 mx-auto mb-2 text-gray-400" />
          <p className="text-sm text-gray-500">Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Í∏∞Îä• (Í≥ß Ï∂îÍ∞Ä ÏòàÏ†ï)</p>
        </div>
      </div>

      <Separator />

      <div className="space-y-4">
        <h3 className="text-lg font-semibold flex items-center">
          <Volume2 className="w-5 h-5 mr-2" />
          ÏäàÌçºÎ≥¥Ïù¥Ïä§ ÏÑ§Ï†ï
        </h3>
        
        <div className="flex items-center space-x-2">
          <Switch
            id="voice_enabled"
            checked={formData.media_settings.voice_settings.enabled}
            onCheckedChange={(checked) => updateFormData('media_settings', 'voice_settings', {
              ...formData.media_settings.voice_settings,
              enabled: checked
            })}
          />
          <Label htmlFor="voice_enabled">ÏùåÏÑ± Í∏∞Îä• ÏÇ¨Ïö©</Label>
        </div>

        {formData.media_settings.voice_settings.enabled && (
          <div className="space-y-3">
            <div>
              <Label>ÏùåÏÑ± ID</Label>
              <Select 
                value={formData.media_settings.voice_settings.voice_id || ''} 
                onValueChange={(value) => updateFormData('media_settings', 'voice_settings', {
                  ...formData.media_settings.voice_settings,
                  voice_id: value
                })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="ÏùåÏÑ±ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="voice1">Ïó¨ÏÑ± ÏùåÏÑ± 1</SelectItem>
                  <SelectItem value="voice2">ÎÇ®ÏÑ± ÏùåÏÑ± 1</SelectItem>
                  <SelectItem value="voice3">Ï§ëÏÑ± ÏùåÏÑ± 1</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderDialoguesTab = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-2">ÏòàÏãú ÎåÄÌôî Îç∞Ïù¥ÌÑ∞</h3>
        <p className="text-sm text-gray-600 mb-4">
          Ï†ÅÏ†àÌïú ÎåÄÌôî ÏòàÏãúÎäî Ï∫êÎ¶≠ÌÑ∞Ïùò ÏÑ±Í≤©Ïù¥ÎÇò, ÎßêÌà¨, ÏßÄÏãùÏùÑ ÌëúÌòÑÌïòÎäîÎç∞ Ï∞∏Í≥†ÏÇ¨Ìï≠Ïù¥ Îê©ÎãàÎã§.
        </p>
      </div>

      <div className="space-y-4">
        {formData.example_dialogues.dialogues.map((dialogue, index) => (
          <Card key={index} className="p-4">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-medium">ÏòàÏãú ÎåÄÌôî #{index + 1}</h4>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => removeExampleDialogue(index)}
              >
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-3">
              <div>
                <Label>ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ</Label>
                <Textarea
                  value={dialogue.user_message}
                  onChange={(e) => updateExampleDialogue(index, 'user_message', e.target.value)}
                  placeholder="ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìï† ÎßåÌïú Î©îÏãúÏßÄÎ•º ÏûëÏÑ±ÌïòÏÑ∏Ïöî"
                  rows={2}
                  maxLength={500}
                />
              </div>
              
              <div>
                <Label>Ï∫êÎ¶≠ÌÑ∞ ÏùëÎãµ</Label>
                <Textarea
                  value={dialogue.character_response}
                  onChange={(e) => updateExampleDialogue(index, 'character_response', e.target.value)}
                  placeholder="Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏùëÎãµÌï† ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî"
                  rows={3}
                  maxLength={1000}
                />
              </div>
            </div>
          </Card>
        ))}

        <Button
          type="button"
          variant="outline"
          onClick={addExampleDialogue}
          className="w-full"
        >
          <Plus className="w-4 h-4 mr-2" />
          ÏòàÏãú ÎåÄÌôî Ï∂îÍ∞Ä (ALT+N)
        </Button>
      </div>
    </div>
  );

  const renderAffinityTab = () => (
    <div className="space-y-6">
      <div className="flex items-center space-x-2">
        <Switch
          id="has_affinity_system"
          checked={formData.affinity_system.has_affinity_system}
          onCheckedChange={(checked) => updateFormData('affinity_system', 'has_affinity_system', checked)}
        />
        <Label htmlFor="has_affinity_system" className="text-lg font-semibold">
          Ï∫êÎ¶≠ÌÑ∞Ïóê Ìò∏Í∞êÎèÑ ÏãúÏä§ÌÖúÏùÑ ÏÑ§Ï†ïÌï†Í≤åÏöî (ÏÑ†ÌÉù)
        </Label>
        <Badge variant="secondary">Beta</Badge>
      </div>

      {formData.affinity_system.has_affinity_system && (
        <div className="space-y-6">
          <div>
            <Label htmlFor="affinity_rules">Ìò∏Í∞êÎèÑ Ï†ïÏùò Î∞è Ï¶ùÍ∞ê Í∑úÏπô</Label>
            <Textarea
              id="affinity_rules"
              value={formData.affinity_system.affinity_rules}
              onChange={(e) => updateFormData('affinity_system', 'affinity_rules', e.target.value)}
              placeholder="Í∞íÏùò Î≥ÄÌôîÎ•º Í≤∞Ï†ïÌïòÎäî ÎÖºÎ¶¨Î•º ÏûÖÎ†•Ìï©ÎãàÎã§."
              rows={6}
              maxLength={2000}
            />
          </div>

          <div>
            <h4 className="font-semibold mb-3">Ìò∏Í∞êÎèÑ Íµ¨Í∞Ñ ÏÑ§Ï†ï</h4>
            <div className="space-y-3">
              {formData.affinity_system.affinity_stages.map((stage, index) => (
                <div key={index} className="flex items-center space-x-3 p-3 border rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Input
                      type="number"
                      value={stage.min_value}
                      className="w-20"
                      readOnly
                    />
                    <span>~</span>
                    <Input
                      type="number"
                      value={stage.max_value || ''}
                      placeholder="‚àû"
                      className="w-20"
                      readOnly
                    />
                  </div>
                  <Textarea
                    value={stage.description}
                    placeholder="Ìò∏Í∞êÎèÑÏóê Îî∞Îùº Ï∫êÎ¶≠ÌÑ∞ÏóêÍ≤å Ï§Ñ Î≥ÄÌôîÎ•º ÏûÖÎ†•Ìï¥Î≥¥ÏÑ∏Ïöî"
                    rows={1}
                    className="flex-1"
                    maxLength={500}
                    readOnly
                  />
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {!formData.affinity_system.has_affinity_system && (
        <div className="text-center py-8 text-gray-500">
          <Heart className="w-12 h-12 mx-auto mb-3 opacity-50" />
          <p>Ìò∏Í∞êÎèÑ ÏãúÏä§ÌÖúÏùÑ ÌôúÏÑ±ÌôîÌïòÎ©¥ Îçî Îã§Ï±ÑÎ°úÏö¥ ÎåÄÌôîÎ•º Í≤ΩÌóòÌï† Ïàò ÏûàÏäµÎãàÎã§.</p>
        </div>
      )}
    </div>
  );

  const renderPublishTab = () => (
    <div className="space-y-6">
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Switch
              id="is_public"
              checked={formData.publish_settings.is_public}
              onCheckedChange={(checked) => updateFormData('publish_settings', 'is_public', checked)}
            />
            <Label htmlFor="is_public" className="text-lg font-semibold">
              Í≥µÍ∞ú Ï∫êÎ¶≠ÌÑ∞Î°ú ÏÑ§Ï†ï
            </Label>
          </div>
          {formData.publish_settings.is_public ? (
            <Badge variant="default" className="bg-green-100 text-green-800">
              <Globe className="w-3 h-3 mr-1" />
              Í≥µÍ∞ú
            </Badge>
          ) : (
            <Badge variant="secondary">
              <Lock className="w-3 h-3 mr-1" />
              ÎπÑÍ≥µÍ∞ú
            </Badge>
          )}
        </div>

        <p className="text-sm text-gray-600">
          {formData.publish_settings.is_public 
            ? 'Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Ïù¥ Ïù¥ Ï∫êÎ¶≠ÌÑ∞ÏôÄ ÎåÄÌôîÌï† Ïàò ÏûàÏäµÎãàÎã§.' 
            : 'ÎÇòÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî ÎπÑÍ≥µÍ∞ú Ï∫êÎ¶≠ÌÑ∞ÏûÖÎãàÎã§.'}
        </p>
      </div>

      <Separator />

      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Í≥†Í∏â ÏÑ§Ï†ï</h3>
        
        <div className="flex items-center space-x-2">
          <Switch
            id="use_translation"
            checked={formData.publish_settings.use_translation}
            onCheckedChange={(checked) => updateFormData('publish_settings', 'use_translation', checked)}
          />
          <Label htmlFor="use_translation">ÌîÑÎ°¨ÌîÑÌä∏ Íµ¨ÏÑ±Ïãú Î≤àÏó≠Î≥∏ ÌôúÏö©</Label>
        </div>
        
        <p className="text-sm text-gray-500">
          ÎåÄÌôîÎ•º ÌïòÎäî Ïú†Ï†ÄÍ∞Ä ÏÇ¨Ïö©ÌïòÎäî Ïñ∏Ïñ¥Î•º Î≥¥Í≥† Î≤àÏó≠Î≥∏ÏùÑ ÏÑ†ÌÉùÌïòÏó¨ ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏûëÏÑ±Ìï©ÎãàÎã§.
        </p>
      </div>

      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-semibold mb-2 text-blue-900">üí° Í≥µÍ∞ú Ï∫êÎ¶≠ÌÑ∞ Í∞ÄÏù¥ÎìúÎùºÏù∏</h4>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>‚Ä¢ Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Ïù¥ Ï¶êÍ∏∏ Ïàò ÏûàÎäî Ìù•ÎØ∏Î°úÏö¥ Ï∫êÎ¶≠ÌÑ∞Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî</li>
          <li>‚Ä¢ Î∂àÏæåÍ∞êÏùÑ Ï§Ñ Ïàò ÏûàÎäî ÎÇ¥Ïö©ÏùÄ ÌîºÌï¥Ï£ºÏÑ∏Ïöî</li>
          <li>‚Ä¢ Ï†ÄÏûëÍ∂åÏù¥ ÏûàÎäî Ï∫êÎ¶≠ÌÑ∞Îäî Ï£ºÏùòÌï¥ÏÑú ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî</li>
        </ul>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50">
      {/* Ìó§Îçî */}
      <header className="bg-white/80 backdrop-blur-sm shadow-sm border-b sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <Link to="/" className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg flex items-center justify-center">
                  <MessageCircle className="w-5 h-5 text-white" />
                </div>
                <h1 className="text-xl font-bold text-gray-900">Ï∫êÎ¶≠ÌÑ∞ ÎßåÎì§Í∏∞</h1>
              </Link>
            </div>
            <div className="flex items-center space-x-3">
              <Button variant="outline" onClick={() => navigate(-1)}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                ÏûÑÌè¨Ìä∏
              </Button>
              <Button 
                onClick={handleSubmit}
                disabled={loading}
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
              >
                {loading ? (
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <Save className="w-4 h-4 mr-2" />
                )}
                Ï†ÄÏû•
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
          <TabsList className="grid w-full grid-cols-5 h-auto p-1">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <TabsTrigger
                  key={tab.id}
                  value={tab.id}
                  className="flex flex-col items-center p-3 data-[state=active]:bg-white data-[state=active]:shadow-sm"
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{tab.emoji}</span>
                    <Icon className="w-4 h-4" />
                  </div>
                  <span className="text-sm font-medium">{tab.label}</span>
                  <span className="text-xs text-gray-500 mt-1 hidden sm:block">
                    {tab.description}
                  </span>
                </TabsTrigger>
              );
            })}
          </TabsList>

          {/* ÌÉ≠ ÏΩòÌÖêÏ∏† */}
          <Card className="shadow-lg">
            <CardContent className="p-6">
              <TabsContent value="basic" className="mt-0">
                {renderBasicInfoTab()}
              </TabsContent>

              <TabsContent value="media" className="mt-0">
                {renderMediaTab()}
              </TabsContent>

              <TabsContent value="dialogues" className="mt-0">
                {renderDialoguesTab()}
              </TabsContent>

              <TabsContent value="affinity" className="mt-0">
                {renderAffinityTab()}
              </TabsContent>

              <TabsContent value="publish" className="mt-0">
                {renderPublishTab()}
              </TabsContent>
            </CardContent>
          </Card>
        </Tabs>
      </main>
    </div>
  );
};

export default CreateCharacterPage; 